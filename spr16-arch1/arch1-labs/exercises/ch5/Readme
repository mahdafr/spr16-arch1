1. Bounds checking:
   In ch5/calendar directory are:
      - calendar_utils.c: defines methods day_of_year and month_day
        from K&R chapter 5.
      - calendar_utils.h: declares (global) methods defined in
      	calendar_utils.c
      - calendar_test.c: implements simple tests of calendar_utils
      	which quietly generate erroneous results for a bogus date
	that does not exceed array bounds.
   Your task is to
      - add bounds checking to the methods in calendar_utils.c
      - modify calendar_test.c to cause calendar_utils to trigger
      	the bounds checking mechanisms you implemented
   It is up to you to define "appropriate" behavior for these
   exceptional conditions. Appropriate does not include segfaults,
   core dumps, corruption of data structures, or quietly returning
   erroneous results.
   Your readme.txt should describe the extension of the error
   detection, handling, and triggering that you implement.
   	>> For this part of the lab, I made the variable yearday a
	   variable thatwill be changed via pointers, so that the
	   code will change the value of its place in memory, and
	   from there be able to handle the test cases as far as I
	   found them approprite. My error-bounds checking can be
	   found as commented to check if the month number is a
	   valid input as well as for the day. Furthermore, this
	   will change the output for the yearday to month_day...
	   expected return value. My test cases include 2 which
	   are expected to cause error and one which will be
	   output and calculated accordingly. My code will handle
	   these errors by modifying their data in memory to be 0
	   if they are out of the bounds of a "normal" date we
	   can use.

2. Pointer-based Sort:
   In directory ch5/sortp is an alternative pointer-based
   quicksort and test program. Your task is to implement an
   alternate and plug-compatible pointer-based sort program. You
   may modify code you submitted for Chapter 4.
   Your submission should include:
      - C source and header for your sort
      - modifications to the Makefile so that the tester is built
      	for both our and your sorts
      - necessary documentation for the grader to easily
      	comprehend your work.
	>> My impelementation of shellsort utilizing pointers is
	   remarkably similar to that of the algorithm without
	   pointers, except in accessing and modifying when the
	   spaces in memory are called. It was tremendously easy
	   to apply what I know in accessing the data using a
	   pointer with the * symbol preceding the name of the
	   pointer variable, and from here one can easily see how
	   my code will swap and store the ordered values of the
	   array. I did not have to utilize the swap function,
	   though I could have if I had implemented my shellsort
	   algorithm a little differently. Lastly, I did utilize
	   the same code I submitted for ch4 exercises, leaving
	   the same commentats and other important pieces of the
	   code intact, except my modifications to using the
	   pointers to access the data instead of an array
	   itself.