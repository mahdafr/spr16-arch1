Exercise 1-10: Write a program to copy its input to its output, replacing each tab by \t, each backspace by \b, and each backslash by \\. This makes tabs and backspaces visible in an unambiguous way.
	 For the test cases, my program runs if we utilize ctrl-Q in order to enter tab as input for the program. Also, in order for the program to read as input the backspace, the input accepted as backspace will be ctrl-H. Lastly, to accept input of \, the backspace character will be outputted using the operator \ followed by the character to output '\'.

Exercise 1-11: How would you test the word count program? What kinds of input are most likely to uncover bugs if there are any?
	 I would run some test cases to see if the input would allow for spaces between words (in other words, will the scanner be reading input as the line or up the space?). I would also test an input with "\n" to be sure it would run both the first two if statements (incrementing n1 and setting state to OUT), this should also break from running the else statement. Since there is a condition containing the empty character ' ', I would test the program with an input string beginning with an empty character, and check if it counts the word.

Exercise 1-15: Rewrite the temperature conversion program of Section 1.2 to use a function for conversion.

makefile: running the command "make all" will execute the rules, then "make clean" will clean the files (object files created) from the directory.

- Mahdokht Afravi
