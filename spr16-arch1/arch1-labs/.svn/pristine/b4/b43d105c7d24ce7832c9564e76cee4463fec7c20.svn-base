#include "draw_arena.h"
#define CRADIUS 5		/* cursor radius */

static u_char cursorX, cursorY;
//my two helper methods
u_char loopDeLoop(u_char start, u_char stop, u_char rowMajor);
u_char getChunk(u_char delY, u_char rowMajor);

u_char cursorChunk(u_char col, u_char rowMajor) {
  u_char chunk = 0;		/* default: transparent */

  signed char deltaY;
  u_char dotYMajor, dotYMinor, dotY;

  // horiz dist from cursor center (+ for right)
  signed char deltaX = (signed)cursorX - (signed)col; 
  // col more than CRADIUS from cursor center?
  if (max(deltaX, -deltaX) > CRADIUS)		      
    return 0;					      /* no dot */

  if (deltaX == 0)
    deltaY = 0;
  else if (deltaX > 0)		/* right of cursor */
    deltaY = deltaX - CRADIUS;
  else 	 // deltaX < 0
    deltaY = deltaX + CRADIUS;

  switch ( deltaX ) {
  case CRADIUS: case -CRADIUS:
    //the diagonal
    deltaY = CRADIUS-3; //2;
    dotY = cursorY + deltaY; /* draw dot at dotY */
    dotYMinor = lcd_getYMinor(dotY);
    dotYMajor = lcd_getYMajor(dotY);
    if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
      chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1];
    deltaY = -CRADIUS+3; //-2;
    dotY = cursorY + deltaY; /* draw dot at dotY */
    dotYMinor = lcd_getYMinor(dotY);
    dotYMajor = lcd_getYMajor(dotY);
    if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
      chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1];
    //the left and right sides
    for ( deltaY=-1 ; deltaY<2 ; deltaY++ ) {
      dotY = cursorY + deltaY; /* draw dot at dotY */
      dotYMinor = lcd_getYMinor(dotY);
      dotYMajor = lcd_getYMajor(dotY);
      if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
	chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1];
    }
    break;
  case 4: case -4:
    //the diagonal
    deltaY = CRADIUS-2; // 2+1;
    dotY = cursorY + deltaY;	/* draw dot at dotY */
    dotYMinor = lcd_getYMinor(dotY);
    dotYMajor = lcd_getYMajor(dotY);
    if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
      chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1]; /* draw at dotY */
    deltaY = -CRADIUS+2; //-2-1;
    dotY = cursorY + deltaY;	/* draw dot at dotY */
    dotYMinor = lcd_getYMinor(dotY);
    dotYMajor = lcd_getYMajor(dotY);
    if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
      chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1]; /* draw at dotY */
    //the left and right sides
    for ( deltaY=-1 ; deltaY<2 ; deltaY++ ) {
      dotY = cursorY + deltaY; /* draw dot at dotY */
      dotYMinor = lcd_getYMinor(dotY);
      dotYMajor = lcd_getYMajor(dotY);
      if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
	chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1];
    }
    break;
  case 3: case -3:
    //the diagonal
    deltaY = CRADIUS-1; //2+2;
    dotY = cursorY + deltaY;	/* draw dot at dotY */
    dotYMinor = lcd_getYMinor(dotY);
    dotYMajor = lcd_getYMajor(dotY);
    if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
      chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1]; /* draw at dotY */
    deltaY = -CRADIUS+1; //-2-2;
    dotY = cursorY + deltaY;	/* draw dot at dotY */
    dotYMinor = lcd_getYMinor(dotY);
    dotYMajor = lcd_getYMajor(dotY);
    if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
      chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1]; /* draw at dotY */
    //the left and right sides
    for ( deltaY=-1 ; deltaY<2 ; deltaY++ ) {
      dotY = cursorY + deltaY; /* draw dot at dotY */
      dotYMinor = lcd_getYMinor(dotY);
      dotYMajor = lcd_getYMajor(dotY);
      if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
	chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1];
    }
    break;
  case 2: case -2:
    //the diagonal
    deltaY = CRADIUS; //2+3;
    dotY = cursorY + deltaY;	/* draw dot at dotY */
    dotYMinor = lcd_getYMinor(dotY);
    dotYMajor = lcd_getYMajor(dotY);
    if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
      chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1]; /* draw at dotY */
    deltaY = -CRADIUS; //-2-3;
    dotY = cursorY + deltaY;	/* draw dot at dotY */
    dotYMinor = lcd_getYMinor(dotY);
    dotYMajor = lcd_getYMajor(dotY);
    if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
      chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1]; /* draw at dotY */
    //the left and right sides
    for ( deltaY=-1 ; deltaY<2 ; deltaY++ ) {
      dotY = cursorY + deltaY; /* draw dot at dotY */
      dotYMinor = lcd_getYMinor(dotY);
      dotYMajor = lcd_getYMajor(dotY);
      if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
	chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1];
    }
    break;
  case 1: case -1:
    //the center of the plus
    for ( deltaY = -CRADIUS ; deltaY<=CRADIUS ; deltaY++ ) {
      dotY = cursorY + deltaY;	/* draw dot at dotY */
      dotYMinor = lcd_getYMinor(dotY);
      dotYMajor = lcd_getYMajor(dotY);
      if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
	chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1]; /* draw at dotY */
    }
    break;
  case 0:
    //the center of the plus
    for ( deltaY = -CRADIUS ; deltaY<=CRADIUS ; deltaY++ ) {
      dotY = cursorY + deltaY;	/* draw dot at dotY */
      dotYMinor = lcd_getYMinor(dotY);
      dotYMajor = lcd_getYMajor(dotY);
      if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
	chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1]; /* draw at dotY */
    }
    break;
  }
  return chunk;
}
u_char getChunk(u_char delY, u_char rowMajor) {
  u_char deChunk, dotY = cursorY + delY;
  if ( lcd_getYMajor(dotY) == rowMajor )
    deChunk = chunkMasks[lcd_getYMinor(dotY)] ^ chunkMasks[lcd_getYMinor(dotY)+1]; //draw at dotY
  return deChunk;
}
u_char loopDeLoop(u_char start, u_char stop, u_char rowMajor) {
  u_char deChunk;
}

void updateCursor(u_char x, u_char y) {
  cursorX = x; cursorY = y;
  static u_char oldCursorX = MAX_X/2, oldCursorY = MAX_Y/2;

  // determine extent of rectangle around both old & new cursor
  u_char leftCol = min(cursorX, oldCursorX) - CRADIUS;
  u_char rightCol = max(cursorX, oldCursorX) + CRADIUS;
  u_char topRow = min(cursorY, oldCursorY) - CRADIUS;
  u_char botRow = max(cursorY, oldCursorY) + CRADIUS;
  
  u_char topRowMajor = lcd_getYMajor(topRow/*cursorY*/ - CRADIUS);
  u_char botRowMajor = lcd_getYMajor(botRow/*cursorY*/ + CRADIUS);

  // remember current cursor position
  oldCursorX = cursorX, oldCursorY = cursorY;

  // redraw all chunks within old & new cursor
  u_char col, rowMajor, chunk;
  for (col = leftCol; col <= rightCol; col++)
    for ( rowMajor=topRowMajor ; rowMajor<=botRowMajor ; rowMajor++ ) {
      //the ^ allows for transparency of the cursor OVER the arena boundaries; off when crossing
      chunk = cursorChunk(col, rowMajor) ^ arenaChunk(col, rowMajor);
      lcd_writeChunkAddr(chunk, col, rowMajor);
      //reset writing the chunk
    }
}

#define arenaTopMajor lcd_getYMajor(ARENA_TOP)
#define arenaBotMajor lcd_getYMajor(ARENA_BOT)
#define arenaTopMinor lcd_getYMinor(ARENA_TOP)
#define arenaBotMinor lcd_getYMinor(ARENA_BOT)

u_char arenaChunk(u_char col, u_char rowMajor) {
  u_char chunk = 0;   // default: transparent

  // major and minor of top & bot

  if (col == ARENA_LEFT || col == ARENA_RIGHT) { // side columns 
    if (rowMajor == arenaTopMajor)	                          // top chunk       
      chunk = 0xff ^ chunkMasks[arenaTopMinor];
    else if (rowMajor == arenaBotMajor)  		          // bot chunk
      chunk = 0xff ^ ~chunkMasks[arenaBotMinor];
    else if (rowMajor > arenaTopMajor && rowMajor < arenaBotMajor)  // mid chunk
      chunk = 0xff;
  } else if (col > ARENA_LEFT && col < ARENA_RIGHT) { // mid column
    chunk = 0;
    if (rowMajor == arenaTopMajor) 				  // top row
      chunk = chunkMasks[arenaTopMinor]  ^chunkMasks[arenaTopMinor+1];
    else if (rowMajor == arenaBotMajor)			  // bot row
      chunk = chunkMasks[arenaBotMinor] ^ chunkMasks[arenaBotMinor+1];
  }
  return chunk;
}

void drawArena(void) {
  u_char col, rowMajor;
  for (col = 0; col < MAX_X; col++)
    for (rowMajor = 0; rowMajor < lcd_getYMajor(MAX_Y); rowMajor++)
      lcd_writeChunkAddr(arenaChunk(col, rowMajor), col, rowMajor);
}
