Exercise 2-1: Write a program to determine the ranges of char, short, int, and long variables, both signed and unsigned, by printing appropriate values from standard headears and by direct computation. Harder if you compute them: determine the ranges of the various floating-point types.
	 >> To approach this problem, I worked with Joseph C, and together we understood that the unsigned minimum values for each type (char, int, short, and long) were all 0, as unsigned includes only positive numbers. As a check, we know that the maximum positive value for an unsigned 8-bit char is 255, for an unsigned 16-bit short is 65535, for an unsigned 32-bit long and int is 4294967295. Furthermore, we know that the signed minimum's are found by starting with a negative value. From here, we can shift to the left (n-1)-bits (where n is 8, 16, 32, and 32, respectively, for char, short, int, and long types). In doing so, we find that the shifts to the left for signed characters will be 0s, thus finding the minimum signed value for each type. From here, we can find the maximum by applying 1's complement to this minimum value.
	 There are no test cases as we can find these values to be verified mathematically utilizing the knowledge of 2^n binary rules. Thus, my exercise is complete with it's application of binary 1's complement and shifting in C to find the minimum and maximum values for these signed and unsigned types.