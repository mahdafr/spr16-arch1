#include "draw_pipe.h"
#define pipeRadius 4		/* pipe radius */

void drawAllStatic(void); //draws pipes on board (not moving)
void moveLeft(u_char pipeToMove, u_char numCols); //moves pipes left by numCols; helper method
void newOpening(void); //"randomizes" pipe gaps

static u_char pipePos, gapTop, oldGapTop = 0;
static u_char pipe = 0, counter = 0;

u_char pipeChunk(u_char col, u_char rowMajor) {
  u_char chunk = 0;		/* default: transparent */
  signed char deltaX, deltaY;
  u_char dotYMajor, dotYMinor;
  // horiz dist from cursor center (+ for right)
  deltaX = (signed)pipePos - (signed)col;
  // col more than CRADIUS from cursor center?
  //if (max(deltaX, -deltaX) > CRADIUS)
  //return 0;   /* no dot */

  if (deltaX == 0)
    deltaY = 0;
  else if (deltaX > 0)		/* right of cursor */
    deltaY = deltaX - pipeRadius;
  else 	 // deltaX < 0
    deltaY = deltaX + pipeRadius;

  //if this deltaX is within the boundaries of [-pipeRadius,pipeRadius]
  if ( -deltaX>=-pipeRadius && deltaX<=pipeRadius ) {
    for ( deltaY=0 ; deltaY<=MAX_Y ; deltaY++ ) {
      //the gap
      if ( deltaY>=gapTop && deltaY<gapTop+20 ) continue;
      //the pipe
      dotYMinor = lcd_getYMinor(deltaY);
      dotYMajor = lcd_getYMajor(deltaY);
      if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
	chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1];
    }
  }
  oldGapTop = gapTop;
  return chunk;
}

void updatePipe(u_char score) {
  //drawAllStatic();
  static u_char prevPipePos = MAX_X/2;
  u_char col, rowMajor, chunk;
  for ( col=pipeRadius+2 ; col<MAX_X ; col++ ) {
    if ( col%pipeRadius==2 ) {
      //draw the pipe starting in 6 columns
      pipePos = col + pipeRadius;
      pipeStartPos[pipe] = pipePos;
      //generate new gap for the new pipe
      newOpening();
      counter++;
      //remember current position
      prevPipePos = pipePos;
      oldGapTop = gapTop;

      //draw between these boundaries
      u_char leftCol = pipePos - pipeRadius;
      u_char rightCol = pipePos + pipeRadius;
      //move back to correct boundaries and write to rightCol
      for ( col=leftCol ; col<=rightCol ; col++ )
	for ( rowMajor=0 ; rowMajor<9 ; rowMajor++ ) {
	  chunk = pipeChunk(col,rowMajor);
	  //writing the score in the last few cols of MSP
	  char scr[] = "     ";
	  //lcd_writeString(score,col,1); //blank
	  itoa(score,scr,10); //convert into to chars
	  chunk -= lcd_writeString(scr,75,1); //write
	  lcd_writeChunkAddr(chunk,col,rowMajor);
	}
      //skip to next pipe's start
      col = prevPipePos + 3*pipeRadius;
      pipe++;
      if ( pipe>=4 ) pipe = 0;
    } else {
      //if we should not draw anything, just move left
      if ( pipe>0 ) moveLeft(pipe-1,1);
    }
  }
}

void moveLeft(u_char move, u_char numCols) {
  u_char colItWas, row, chunk, colItIs;
  for ( colItWas=0 ; colItWas<MAX_X ; colItWas++ ) {
    //if we should draw the pipe moving
    if ( colItWas==pipeStartPos[move] ) {
      u_char right = colItIs + pipeRadius;
      for ( colItIs=colItWas-numCols ; colItIs<=colItWas+pipeRadius ; colItIs++ ) {
	if ( colItIs<=right ) //draw pipe in new columns
	  for ( row=0 ; row<9 ; row++ ) {
	    chunk = pipeChunk(colItIs,row);
	    lcd_writeChunkAddr(chunk,colItIs,row);
	  }
        else //erase old pipe
	  for ( row=0 ; row<9 ; row++ ) ;
	    //lcd_writeChunkAddr(0,colItIs,row);
      }
      return;
    }
  }
}
void newOpening() {
  switch ( counter%4 ) {
    case 0:
      gapTop -= 15;
      break;
    case 1:
      gapTop += 25;
      break;
    case 2:
      gapTop -= 30;
      break;
    case 3:
      gapTop += 20;
      break;
  }
  //gap is too close to the bottom or top
  if ( gapTop>=MAX_Y-15 || gapTop<=-20 )
    gapTop = 35;
  pipeGap[pipe] = gapTop; //saving the gap for bird to flap through
  oldGapTop = gapTop;
}

void drawAllStatic() {
  u_char col, rowMajor, chunk; static u_char prevPipePos;
  pipePos = 0;
  for ( col=0 ; col<MAX_X ; col++ ) {
    if ( col%pipeRadius==2 ) {
      pipePos = col + pipeRadius;
      pipeStartPos[pipe] = pipePos;
      
      //generate new gap for the new pipe
      //oldGapTop = gapTop;
      //if ( oldGapTop>gapTop ) gapTop -= 25; //was lower so move up
      //else gapTop += 25; //was higher so move lower
      if ( gapTop>=MAX_Y-20 || gapTop<=20 )
	gapTop = 35;
      else
	gapTop -= 15;
      pipeGap[pipe] = gapTop; //saving the gap for bird to flap through
      //remember current position
      prevPipePos = pipePos;
      oldGapTop = gapTop;

      //moveLeft(pipe-1,numColsToMoveLeft);

      //determine extent of rectangle around both old & new cursor
      u_char leftCol = min(pipePos, prevPipePos) - pipeRadius;
      u_char rightCol = max(pipePos, prevPipePos) + pipeRadius;    
      for ( col=leftCol ; col<=rightCol ; col++ )
	for ( rowMajor=0 ; rowMajor<9 ; rowMajor++ ) {
	  chunk = pipeChunk(col,rowMajor);
	  lcd_writeChunkAddr(chunk,col,rowMajor);
	}
      col = prevPipePos  + 2*pipeRadius;
    } else {
      //do not draw anything in this column
      for ( rowMajor=0 ; rowMajor<9 ; rowMajor++ )
	lcd_writeChunkAddr(0,col,rowMajor);
    }
  }
}
