#include "draw_arena.h"
#define pipeRadius 6		/* cursor radius */

void drawAllStatic(void);
void moveLeft(u_char pipeToMove, u_char numCols);

static u_char pipePos, gapTop, oldGapTop = 0;
static u_char pipeStartingPosition[5], pipeGap[5], pipe = 0;
  
u_char cursorChunk(u_char col, u_char rowMajor) {
  u_char chunk = 0;		/* default: transparent */
  signed char deltaX, deltaY;
  u_char dotYMajor, dotYMinor;
  // horiz dist from cursor center (+ for right)
  deltaX = (signed)pipePos - (signed)col;
  // col more than CRADIUS from cursor center?
  //if (max(deltaX, -deltaX) > CRADIUS)
  //return 0;   /* no dot */

  if (deltaX == 0)
    deltaY = 0;
  else if (deltaX > 0)		/* right of cursor */
    deltaY = deltaX - pipeRadius;
  else 	 // deltaX < 0
    deltaY = deltaX + pipeRadius;

  //if this deltaX is within the boundaries of [-pipeRadius,pipeRadius]
  if ( -deltaX>=-pipeRadius && deltaX<=pipeRadius ) {
    for ( deltaY=0 ; deltaY<=MAX_Y ; deltaY++ ) {
      //the gap
      if ( deltaY>=gapTop && deltaY<gapTop+20 ) continue;
      //the pipe
      dotYMinor = lcd_getYMinor(deltaY);
      dotYMajor = lcd_getYMajor(deltaY);
      if ( dotYMajor==rowMajor ) /* dotY in this chunk? */
	chunk += chunkMasks[dotYMinor] ^ chunkMasks[dotYMinor+1];
    }
  }
  oldGapTop = gapTop;
  return chunk;
}

void updatePipe(u_char numColsToMoveLeft) {
  //drawAllStatic();
  static u_char prevPipePos = MAX_X/2;

  //redraw all pipes
  u_char col, rowMajor, chunk;
  for ( col=0 ; col<MAX_X ; col++ ) {
    if ( col%pipeRadius==2 ) {
      pipePos = col + pipeRadius;
      pipeStartingPosition[pipe] = pipePos;
      
      //generate new gap for the new pipe
      //oldGapTop = gapTop;
      //if ( oldGapTop>gapTop ) gapTop -= 25; //was lower so move up
      //else gapTop += 25; //was higher so move lower
      if ( gapTop>=MAX_Y-20 || gapTop<=20 )
	gapTop = 35;
      else
	gapTop -= 15;
      pipeGap[pipe] = gapTop; //saving the gap for bird to flap through
      //remember current position
      prevPipePos = pipePos;
      oldGapTop = gapTop;

      //moveLeft(pipe-1,numColsToMoveLeft);

      //determine extent of rectangle around both old & new cursor
      u_char leftCol = min(pipePos, prevPipePos) - pipeRadius;
      u_char rightCol = max(pipePos, prevPipePos) + pipeRadius;    
      for ( col=leftCol ; col<=rightCol ; col++ )
	for ( rowMajor=0 ; rowMajor<9 ; rowMajor++ ) {
	  chunk = cursorChunk(col,rowMajor);
	  lcd_writeChunkAddr(chunk,col,rowMajor);
	}
      col = prevPipePos + 2*pipeRadius;
    } else {
      //do not draw anything in this column
      for ( rowMajor=0 ; rowMajor<9 ; rowMajor++ )
	lcd_writeChunkAddr(0,col,rowMajor);
    }
  }
}
void moveLeft(u_char pipeToMove, u_char numCols) {
  u_char col, row, chunk;
  for ( col=pipeStart0 ; col<=pipeStart1-pipeRadius ; col++ )
    for ( rowMajor=0 ; rowMajor<9 ; rowMajor++ ) {
      chunk = cursorChunk(col,rowMajor);
      lcd_writeChunkAddr(chunk,col,rowMajor);
    }

  void drawAllStatic() {
    u_char col, rowMajor, chunk; static u_char prevPipePos;
    pipePos = 0;
    for ( col=0 ; col<MAX_X ; col++ ) {
      if ( col%pipeRadius==2 ) {
	pipePos = col + pipeRadius;
	pipeStartingPosition[pipe] = pipePos;
      
      //generate new gap for the new pipe
      //oldGapTop = gapTop;
      //if ( oldGapTop>gapTop ) gapTop -= 25; //was lower so move up
      //else gapTop += 25; //was higher so move lower
      if ( gapTop>=MAX_Y-20 || gapTop<=20 )
	gapTop = 35;
      else
	gapTop -= 15;
      pipeGap[pipe] = gapTop; //saving the gap for bird to flap through
      //remember current position
      prevPipePos = pipePos;
      oldGapTop = gapTop;

      //moveLeft(pipe-1,numColsToMoveLeft);

      //determine extent of rectangle around both old & new cursor
      u_char leftCol = min(pipePos, prevPipePos) - pipeRadius;
      u_char rightCol = max(pipePos, prevPipePos) + pipeRadius;    
      for ( col=leftCol ; col<=rightCol ; col++ )
	for ( rowMajor=0 ; rowMajor<9 ; rowMajor++ ) {
	  chunk = cursorChunk(col,rowMajor);
	  lcd_writeChunkAddr(chunk,col,rowMajor);
	}
      col = prevPipePos + 2*pipeRadius;
    } else {
      //do not draw anything in this column
      for ( rowMajor=0 ; rowMajor<9 ; rowMajor++ )
	lcd_writeChunkAddr(0,col,rowMajor);
    }
  }
}
